{"version":3,"file":"static/js/768.764e43c7.chunk.js","mappings":"0TAeMA,GAASC,EAAAA,EAAAA,MAASC,MAAM,CAC5BC,MAAMC,EAAAA,EAAAA,MAASC,SAAS,aACxBC,OAAOF,EAAAA,EAAAA,MAASE,MAAM,iBAAiBD,SAAS,aAChDE,UAAUH,EAAAA,EAAAA,MAASI,IAAI,GAAGH,SAAS,eAG/BI,EAAgB,CACpBN,KAAM,GACNG,MAAO,GACPC,SAAU,IAoGZ,EAjGqB,WACnB,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAW1B,OACE,+BACE,SAAC,KAAD,CACEL,cAAeA,EACfM,SAbqB,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UACnCP,GACEQ,EAAAA,EAAAA,KAAgB,UACXF,KAGPC,GACD,EAOKE,iBAAkBnB,EAHpB,SAKG,SAAAoB,GAAK,OACJ,UAAC,KAAD,WACa,iBAAVR,IACC,SAAC,KAAD,CACES,MAAM,OACNC,UAAU,UACVC,UAAU,OACVC,QAAQ,KACRC,aAAa,OACbC,EAAE,SACFC,EAAE,QAPJ,gHAaF,SAAC,KAAD,CAAOxB,KAAK,OAAZ,SACG,gBAAGyB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAO5B,MAAQ0B,EAAKG,QAAQ7B,KAAzD,WACE,SAAC,IAAD,yBACA,SAAC,KAAD,UAAmB0B,EAAKE,OAAO5B,QAC/B,SAAC,EAAA8B,GAAD,kBACML,GADN,IAEEM,KAAK,OACLC,YAAY,aACZC,aAAa,WARlB,KAaH,SAAC,KAAD,CAAOjC,KAAK,QAAZ,SACG,gBAAGyB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,UAAWD,EAAKE,OAAOzB,OAASuB,EAAKG,QAAQ1B,MAD/C,WAGE,SAAC,IAAD,qBACA,SAAC,KAAD,UAAmBuB,EAAKE,OAAOzB,SAC/B,SAAC,EAAA2B,GAAD,kBACML,GADN,IAEEM,KAAK,QACLC,YAAY,cACZC,aAAa,WAVlB,KAeH,SAAC,KAAD,CAAOjC,KAAK,WAAZ,SACG,gBAAGyB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,UAAWD,EAAKE,OAAOxB,UAAYsB,EAAKG,QAAQzB,SADlD,WAGE,SAAC,IAAD,wBACA,SAAC,KAAD,UAAmBsB,EAAKE,OAAOxB,YAC/B,SAAC,EAAA0B,GAAD,kBACML,GADN,IAEEM,KAAK,WACLC,YAAY,iBACZC,aAAa,WAVlB,KAeH,SAAC,IAAD,CACEC,GAAI,EACJC,YAAY,OACZJ,KAAK,SACLK,UAAWnB,EAAMoB,QAJnB,sBA9DE,KA2Eb,ECpHD,EAJiB,WACf,OAAO,SAAC,EAAD,GACR,C","sources":["components/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react';\nimport { Field, Form, Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCreateUser } from 'redux/auth/operations';\nimport { selectError } from 'redux/auth/selectors';\n\nimport { object, string } from 'yup';\n\nconst schema = object().shape({\n  name: string().required('*required'),\n  email: string().email('Invalid email').required('*required'),\n  password: string().min(8).required('*required'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n\n  const submitRegistration = (value, { resetForm }) => {\n    dispatch(\n      fetchCreateUser({\n        ...value,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={submitRegistration}\n        validationSchema={schema}\n      >\n        {props => (\n          <Form>\n            {error === 'error signup' && (\n              <Box\n                color=\" red\"\n                textAlign=\" center\"\n                boxShadow=\"base\"\n                rounded=\"md\"\n                borderRadius=\"15px\"\n                m=\"10px 0\"\n                p=\"5px 0\"\n              >\n                You have entered an invalid email address or a user with this\n                email address is already registered\n              </Box>\n            )}\n            <Field name=\"name\">\n              {({ field, form }) => (\n                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                  <FormLabel>User name</FormLabel>\n                  <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                  <Input\n                    {...field}\n                    type=\"text\"\n                    placeholder=\"Enter name\"\n                    autoComplete=\"off\"\n                  />\n                </FormControl>\n              )}\n            </Field>\n            <Field name=\"email\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.email && form.touched.email}\n                >\n                  <FormLabel>Email</FormLabel>\n                  <FormErrorMessage>{form.errors.email}</FormErrorMessage>\n                  <Input\n                    {...field}\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    autoComplete=\"off\"\n                  />\n                </FormControl>\n              )}\n            </Field>\n            <Field name=\"password\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.password && form.touched.password}\n                >\n                  <FormLabel>Password</FormLabel>\n                  <FormErrorMessage>{form.errors.password}</FormErrorMessage>\n                  <Input\n                    {...field}\n                    type=\"password\"\n                    placeholder=\"Enter password\"\n                    autoComplete=\"off\"\n                  />\n                </FormControl>\n              )}\n            </Field>\n            <Button\n              mt={4}\n              colorScheme=\"teal\"\n              type=\"submit\"\n              disabled={!props.isValid}\n            >\n              Submit\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm';\n\nconst Register = () => {\n  return <RegisterForm />;\n};\n\nexport default Register;\n"],"names":["schema","object","shape","name","string","required","email","password","min","initialValues","dispatch","useDispatch","error","useSelector","selectError","onSubmit","value","resetForm","fetchCreateUser","validationSchema","props","color","textAlign","boxShadow","rounded","borderRadius","m","p","field","form","isInvalid","errors","touched","I","type","placeholder","autoComplete","mt","colorScheme","disabled","isValid"],"sourceRoot":""}