{"version":3,"file":"static/js/768.8069f67e.chunk.js","mappings":"qSAmBMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KACHG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZC,MAAON,EAAAA,KAAaM,MAAM,iBAAiBD,SAAS,YACpDE,SAAUP,EAAAA,KAAaG,IAAI,GAAGE,SAAS,cAGnCG,EAAgB,CACpBN,KAAM,GACNI,MAAO,GACPC,SAAU,IAqEZ,EAlEqB,WACnB,IAAME,GAAWC,EAAAA,EAAAA,MAWjB,OACE,+BACE,SAAC,KAAD,CACEF,cAAeA,EACfG,SAbqB,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UACnCJ,GACEK,EAAAA,EAAAA,KAAgB,UACXF,KAGPC,GACD,EAOKE,iBAAkBhB,EAHpB,SAKG,kBACC,UAAC,KAAD,YACE,SAAC,KAAD,CAAOG,KAAK,OAAZ,SACG,gBAAGc,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAOjB,MAAQe,EAAKG,QAAQlB,KAAzD,WACE,SAAC,IAAD,yBACA,SAAC,EAAAmB,GAAD,kBAAWL,GAAX,IAAkBM,KAAK,OAAOC,YAAY,iBAC1C,SAAC,KAAD,UAAmBN,EAAKE,OAAOjB,SAJlC,KAQH,SAAC,KAAD,CAAOA,KAAK,QAAZ,SACG,gBAAGc,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAOjB,MAAQe,EAAKG,QAAQlB,KAAzD,WACE,SAAC,IAAD,qBACA,SAAC,EAAAmB,GAAD,kBAAWL,GAAX,IAAkBM,KAAK,QAAQC,YAAY,kBAC3C,SAAC,KAAD,UAAmBN,EAAKE,OAAOjB,SAJlC,KAUH,SAAC,KAAD,CAAOA,KAAK,WAAZ,SACG,gBAAGc,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CAAaC,UAAWD,EAAKE,OAAOjB,MAAQe,EAAKG,QAAQlB,KAAzD,WACE,SAAC,IAAD,wBACA,SAAC,EAAAmB,GAAD,kBACML,GADN,IAEEM,KAAK,WACLC,YAAY,qBAEd,SAAC,KAAD,UAAmBN,EAAKE,OAAOjB,SARlC,KAcH,SAAC,IAAD,CAAQsB,GAAI,EAAGC,YAAY,OAAOH,KAAK,SAAvC,sBArCH,KA6CR,ECvFD,G,QARiB,WACf,OACE,+BACE,SAAC,EAAD,KAGL,E","sources":["components/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import {\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react';\nimport {  Field, Form, Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { fetchCreateUser } from 'redux/auth/operations';\n// import { object, string } from 'yup';\n\n// const schema = object({\n//   name: string().required(),\n//   email: string().email().required(),\n//   password: string().min(8).required(),\n// });\nimport * as Yup from 'yup';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(70, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string().min(8).required('Required'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const submitRegistration = (value, { resetForm }) => {\n    dispatch(\n      fetchCreateUser({\n        ...value,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={submitRegistration}\n        validationSchema={schema}\n      >\n        {() => (\n          <Form>\n            <Field name=\"name\">\n              {({ field, form }) => (\n                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                  <FormLabel>User name</FormLabel>\n                  <Input {...field} type=\"text\" placeholder=\"Enter name\" />\n                  <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n                </FormControl>\n              )}\n            </Field>\n            <Field name=\"email\">\n              {({ field, form }) => (\n                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                  <FormLabel>Email</FormLabel>\n                  <Input {...field} type=\"email\" placeholder=\"Enter email\" />\n                  <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n\n                  {/* <ErrorMessage name=\"email\" component=\"div\" /> */}\n                </FormControl>\n              )}\n            </Field>\n            <Field name=\"password\">\n              {({ field, form }) => (\n                <FormControl isInvalid={form.errors.name && form.touched.name}>\n                  <FormLabel>Password</FormLabel>\n                  <Input\n                    {...field}\n                    type=\"password\"\n                    placeholder=\"Enter password\"\n                  />\n                  <FormErrorMessage>{form.errors.name}</FormErrorMessage>\n\n                  {/* <ErrorMessage name=\"password\" component=\"div\" /> */}\n                </FormControl>\n              )}\n            </Field>\n            <Button mt={4} colorScheme=\"teal\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm';\nimport React from 'react';\n\nconst Register = () => {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["schema","Yup","shape","name","min","max","required","email","password","initialValues","dispatch","useDispatch","onSubmit","value","resetForm","fetchCreateUser","validationSchema","field","form","isInvalid","errors","touched","I","type","placeholder","mt","colorScheme"],"sourceRoot":""}