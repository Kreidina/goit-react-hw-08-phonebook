{"version":3,"file":"static/js/769.94cb43e5.chunk.js","mappings":"oUAgBMA,GAASC,EAAAA,EAAAA,MAASC,MAAM,CAC5BC,OAAOC,EAAAA,EAAAA,MAASD,MAAM,iBAAiBE,SAAS,aAChDC,UAAUF,EAAAA,EAAAA,MAASG,IAAI,GAAGF,SAAS,eAG/BG,EAAgB,CACpBL,MAAO,GACPG,SAAU,IAoFZ,EAjFkB,WAChB,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAU1B,OACE,+BACE,SAAC,KAAD,CACEL,cAAeA,EACfM,SAbc,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UAC5BP,GACEQ,EAAAA,EAAAA,KAAW,UACNF,KAGPC,GACD,EAOKE,iBAAkBlB,EAHpB,SAKG,SAAAmB,GAAK,OACJ,UAAC,KAAD,WACa,gBAAVR,IACC,SAAC,KAAD,CACES,MAAM,OACNC,UAAU,UACVC,UAAU,OACVC,QAAQ,KACRC,aAAa,OACbC,EAAE,SACFC,EAAE,QAPJ,gDAYF,SAAC,KAAD,CAAOC,KAAK,QAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,UAAWD,EAAKE,OAAO5B,OAAS0B,EAAKG,QAAQ7B,MAD/C,WAGE,SAAC,IAAD,qBACA,SAAC,KAAD,UAAmB0B,EAAKE,OAAO5B,SAC/B,SAAC,EAAA8B,GAAD,kBACML,GADN,IAEEM,KAAK,QACLC,YAAY,cACZC,aAAa,WAVlB,KAeH,SAAC,KAAD,CAAOT,KAAK,WAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACC,UAAC,KAAD,CACEC,UAAWD,EAAKE,OAAOzB,UAAYuB,EAAKG,QAAQ1B,SADlD,WAGE,SAAC,IAAD,wBACA,SAAC,KAAD,UAAmBuB,EAAKG,QAAQ1B,YAChC,SAAC,EAAA2B,GAAD,kBACML,GADN,IAEEM,KAAK,WACLC,YAAY,iBACZC,aAAa,WAVlB,KAeH,SAAC,IAAD,CACEC,GAAI,EACJC,YAAY,OACZJ,KAAK,SACLK,UAAWpB,EAAMqB,QAJnB,sBA/CE,KA4Db,ECnGD,EAJc,WACZ,OAAO,SAAC,EAAD,GACR,C","sources":["components/LoginForm.jsx","pages/Login.js"],"sourcesContent":["import {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react';\nimport { Field, Form, Formik } from 'formik';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchLogin } from 'redux/auth/operations';\nimport { selectError } from 'redux/auth/selectors';\n\nimport { object, string } from 'yup';\n\nconst schema = object().shape({\n  email: string().email('Invalid email').required('*Required'),\n  password: string().min(8).required('*Required'),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const submitLogin = (value, { resetForm }) => {\n    dispatch(\n      fetchLogin({\n        ...value,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={submitLogin}\n        validationSchema={schema}\n      >\n        {props => (\n          <Form>\n            {error === 'error login' && (\n              <Box\n                color=\" red\"\n                textAlign=\" center\"\n                boxShadow=\"base\"\n                rounded=\"md\"\n                borderRadius=\"15px\"\n                m=\"10px 0\"\n                p=\"5px 0\"\n              >\n                Your Email or Password is invalid\n              </Box>\n            )}\n            <Field name=\"email\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.email && form.touched.email}\n                >\n                  <FormLabel>Email</FormLabel>\n                  <FormErrorMessage>{form.errors.email}</FormErrorMessage>\n                  <Input\n                    {...field}\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    autoComplete=\"off\"\n                  />\n                </FormControl>\n              )}\n            </Field>\n            <Field name=\"password\">\n              {({ field, form }) => (\n                <FormControl\n                  isInvalid={form.errors.password && form.touched.password}\n                >\n                  <FormLabel>Password</FormLabel>\n                  <FormErrorMessage>{form.touched.password}</FormErrorMessage>\n                  <Input\n                    {...field}\n                    type=\"password\"\n                    placeholder=\"Enter password\"\n                    autoComplete=\"off\"\n                  />\n                </FormControl>\n              )}\n            </Field>\n            <Button\n              mt={4}\n              colorScheme=\"teal\"\n              type=\"submit\"\n              disabled={!props.isValid}\n            >\n              Submit\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm';\n\nconst Login = () => {\n  return <LoginForm />;\n};\n\nexport default Login;\n"],"names":["schema","object","shape","email","string","required","password","min","initialValues","dispatch","useDispatch","error","useSelector","selectError","onSubmit","value","resetForm","fetchLogin","validationSchema","props","color","textAlign","boxShadow","rounded","borderRadius","m","p","name","field","form","isInvalid","errors","touched","I","type","placeholder","autoComplete","mt","colorScheme","disabled","isValid"],"sourceRoot":""}